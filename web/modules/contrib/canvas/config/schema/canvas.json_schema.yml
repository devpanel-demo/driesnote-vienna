# Config schema types that allows the subset of JSON Schema supported by SDC and Canvas to be expressed as config.
#
# This is used to power Canvas's "code components" aka JavaScriptComponent config entities. Those are intended to reuse the
# Single-Directory Components infrastructure for describing "props" of a component.
#
# @see \Drupal\canvas\Entity\JavaScriptComponent
# @see \Drupal\canvas\Entity\JavaScriptComponent::toSdcDefinition()
# @see \Drupal\canvas\JsonSchemaInterpreter\JsonSchemaType::computeStorablePropShape()
#
# Caveats:
# 1. Canvas does not (yet) have a field type+widget for every possible JSON Schema (string) format. So `format` is an
#    optional key in `canvas.json_schema.prop.string`, and lists only those formats that Canvas can actually
#    generate an input UX for.
#    Note: the official JSON Schema spec only defines formats for `type: string`, but formats for other types are
#    possible in principle.
# 2. Defining _arbitrary_ `type: object` shapes is not yet supported. Currently only one `type: object` is supported:
#    images, by specifying `$ref: json-schema-definitions://canvas.module/image`. Consequently, `$ref` is
#    required for only this JSON schema type.

canvas.json_schema.prop.*:
  type: mapping
  mapping:
    title:
      type: required_label
      label: 'Name'
    type:
      type: string
      label: 'Type'
      constraints:
        Choice:
          # Not all JSON Schema basic types make sense (for example: `null`).
          # @see https://json-schema.org/understanding-json-schema/reference/type
          choices:
            - 'string'
            - 'number'
            - 'integer'
            - 'boolean'
            - 'object'
            # @todo Consider adding `array` after https://www.drupal.org/i/3467870 is fixed.
    description:
      requiredKey: false
      type: label
      label: 'Human readable description for the component'
    examples:
      # This is NOT optional for required props. Rather than repeating that validation logic here, let the
      # JsComponentHasValidAndSupportedSdcMetadata constraint take care of that.
      requiredKey: false
      type: sequence
      label: 'Examples'
      sequence:
        # Each of the 5 concrete config schema subtypes (one for each of the JSON Schema types allowed by the `Choice`
        # constraint above) must define this.
        type: undefined

# @see https://json-schema.org/understanding-json-schema/reference/strings
canvas.json_schema.prop.string:
  type: canvas.json_schema.prop.*
  constraints:
    FullyValidatable: ~
  mapping:
    examples:
      sequence:
        type: string
        # Do not allow NULL.
        constraints:
          NotNull: ~
    enum:
      requiredKey: false
      type: sequence
      sequence:
        type: string
        # Do not allow NULL.
        constraints:
          NotNull: ~
    meta:enum:
      requiredKey: false
      type: sequence
      sequence:
        type: label
        # Do not allow NULL.
        constraints:
          NotNull: ~
    x-translation-context:
      requiredKey: false
      type: string
      label: 'Translation context'
    format:
      requiredKey: false
      type: string
      label: 'Format'
      constraints:
        Choice:
          # @see https://json-schema.org/understanding-json-schema/reference/type#built-in-formats
          # @see Drupal\canvas\JsonSchemaInterpreter\JsonSchemaStringFormat::computeStorablePropShape()
          choices:
            - date-time
            - date
            - email
            - idn-email
            - uri
            - uri-reference
            - iri
            - iri-reference
    contentMediaType:
      requiredKey: false
      type: string
      label: 'Content media type'
      constraints:
        Choice:
          choices:
            - 'text/html'
    # @see docs/shape-matching-into-field-types.md#3.2
    'x-formatting-context':
      requiredKey: false
      type: string
      label: 'Formatting context'
      constraints:
        Choice:
          choices:
            - 'block'
            # @todo Uncomment this in https://www.drupal.org/i/3517735
            # - 'inline'

# @see https://json-schema.org/understanding-json-schema/reference/numeric#integer
canvas.json_schema.prop.integer:
  type: canvas.json_schema.prop.*
  constraints:
    FullyValidatable: ~
  mapping:
    examples:
      sequence:
        # ⚠️ Pure coincidence that JSON Schema's `integer` matches Config Schema's `integer`.
        type: integer
        # Do not allow NULL.
        constraints:
          NotNull: ~
    enum:
      requiredKey: false
      type: sequence
      sequence:
        type: integer
        # Do not allow NULL.
        constraints:
          NotNull: ~
    meta:enum:
      requiredKey: false
      type: sequence
      sequence:
        type: label
        # Do not allow NULL.
        constraints:
          NotNull: ~
    x-translation-context:
      requiredKey: false
      type: string
      label: 'Translation context'

# @see https://json-schema.org/understanding-json-schema/reference/numeric#number
canvas.json_schema.prop.number:
  type: canvas.json_schema.prop.*
  constraints:
    FullyValidatable: ~
  mapping:
    examples:
      sequence:
        # ⚠️ JSON Schema's `number` corresponds to Config Schema's `float`.
        type: float
        # Do not allow NULL.
        constraints:
          NotNull: ~
    # ⚠️ For now, Canvas does not support `enum` on `type: float` to match core and for better usability.
    # @see https://www.drupal.org/project/canvas/issues/3534758

# @see https://json-schema.org/understanding-json-schema/reference/boolean
# ⚠️ No `enum` here, because that would make little sense: it would always be `enum: [true, false]`.
canvas.json_schema.prop.boolean:
  type: canvas.json_schema.prop.*
  constraints:
    FullyValidatable: ~
  mapping:
    examples:
      sequence:
        # ⚠️ Pure coincidence that JSON Schema's `boolean` matches Config Schema's `boolean`.
        type: boolean
        # Do not allow NULL.
        constraints:
          NotNull: ~

# @see https://json-schema.org/understanding-json-schema/reference/object
canvas.json_schema.prop.object:
  type: canvas.json_schema.prop.*
  constraints:
    FullyValidatable: ~
  mapping:
    examples:
      sequence:
        type: canvas.json_schema.object
        # Do not allow NULL.
        constraints:
          NotNull: ~
          NotBlank:
            allowNull: true
    enum:
      requiredKey: false
      # Same remark as for `examples` above.
      type: sequence
      sequence:
        type: mapping
        # Do not allow NULL.
        constraints:
          NotNull: ~
          NotBlank:
            allowNull: true
    meta:enum:
      requiredKey: false
      type: sequence
      sequence:
        type: label
        # Do not allow NULL.
        constraints:
          NotNull: ~
    '$ref':
      # ⚠️ Note the absence of `requiredKey: false` here: Canvas does not (yet) support arbitrary `type: object` shapes, so
      # `$ref` is actually REQUIRED for such props!
      type: string
      constraints:
        # @see \Drupal\canvas\JsonSchemaInterpreter\JsonSchemaType::computeStorablePropShape()
        Choice:
          choices:
            - 'json-schema-definitions://canvas.module/image'
            - 'json-schema-definitions://canvas.module/video'

canvas.json_schema.object:
  class: '\Drupal\canvas\Config\Schema\JsonSchemaObject'
  label: JSON Schema object
  type: mapping
  constraints:
    FullyValidatable: ~
